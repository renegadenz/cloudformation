AWSTemplateFormatVersion: '2010-09-09'

Resources:
  MWAAEnvironment:
    Type: AWS::MWAA::Environment
    Properties:
      Name: PrivateMWAAEnvironment
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      SourceBucketArn: !GetAtt MwaaS3Bucket.Arn
      DagS3Path: "dags/"
      PluginsS3Path: "plugins/"
      RequirementsS3Path: "requirements/requirements.txt"
      StartupScriptS3Path: "scripts/startup.sh"
      NetworkConfiguration:
        SecurityGroupIds:
          - !Ref MwaaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      WebserverAccessMode: PRIVATE_ONLY
      EnvironmentClass: mw1.small
      AirflowVersion: "2.6.3"
      MaxWorkers: 5
      MinWorkers: 1
      Schedulers: 2
    DependsOn:
      - LambdaDagInitializerInvoke

  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: "airflow.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: MWAAExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                Resource:
                  - !Sub "${MwaaS3Bucket.Arn}/*"
                  - !Sub "${MwaaS3Bucket.Arn}"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                  - "logs:GetLogGroupFields"
                  - "logs:DescribeLogGroups"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/mwaa/*"
              - Effect: Allow
                Action:
                  - "logs:DescribeLogGroups"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "sqs:ChangeMessageVisibility"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                  - "sqs:GetQueueUrl"
                  - "sqs:ReceiveMessage"
                  - "sqs:SendMessage"
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeRouteTables"
                  - "ec2:DescribeSecurityGroups"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey"
                  - "kms:GenerateDataKey*"
                  - "kms:DescribeKey"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "airflow:PublishMetrics"
                Resource: !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/PrivateMWAAEnvironment"

  LambdaDagInitializerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
                Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "${MwaaS3Bucket.Arn}/*"
                  - !Sub "${MwaaS3Bucket.Arn}"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  LambdaDagInitializer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InitializeDagFolder
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaDagInitializerRole.Arn
      Code:
        ZipFile: |
          import os
          import boto3
          def handler(event, context):
              s3 = boto3.client('s3')
              bucket_name = os.environ.get('BucketName')
              if not bucket_name:
                  raise ValueError("BucketName environment variable is not set.")
              s3.put_object(Bucket=bucket_name, Key='dags/placeholder.txt', Body='Placeholder file to ensure the directory exists')
              s3.put_object(Bucket=bucket_name, Key='requirements/requirements.txt', Body='astronomer-cosmos==1.7.1\nsnowflake-connector-python\napache-airflow-providers-snowflake\nsnowflake-sqlalchemy\n')
              s3.put_object(Bucket=bucket_name, Key='scripts/startup.sh', Body='#!/bin/sh\n\nexport AIRFLOW_HOME="/usr/local/airflow"\n\nexport DBT_VENV_PATH="${AIRFLOW_HOME}/dbt_venv"\nexport DBT_PROJECT_PATH="${AIRFLOW_HOME}/dags/dbt_data_platform"\n\nexport PIP_USER=false\n\npython3 -m venv "${DBT_VENV_PATH}"\n\n${DBT_VENV_PATH}/bin/pip install dbt-core==1.8.8\n${DBT_VENV_PATH}/bin/pip install dbt-snowflake\n\nexport PIP_USER=true\n')
              return {"statusCode": 200, "body": "DAG folder, requirements, and startup script initialized"}
      Timeout: 60
      Environment:
        Variables:
          BucketName: !Ref MwaaS3Bucket

  LambdaDagInitializerInvoke:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaDagInitializer.Arn
      BucketName: !Ref MwaaS3Bucket

  MwaaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for MWAA environment"
      VpcId: !Ref VPCId

  MwaaS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "mwaa-dags-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Parameters:
  VPCId:
    Type: String
    Description: VPC ID where MWAA will be deployed

  PrivateSubnet1:
    Type: String
    Description: First private subnet ID

  PrivateSubnet2:
    Type: String
    Description: Second private subnet ID

Outputs:
  MWAAEnvironmentName:
    Description: Name of the MWAA environment
    Value: !Ref MWAAEnvironment

  MWAAExecutionRoleArn:
    Description: Execution Role ARN for MWAA
    Value: !GetAtt MwaaExecutionRole.Arn
